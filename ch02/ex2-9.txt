예제 2-9 설정 루틴의 줄 단위 비용 검사

Total time: 76.2383 s
File: julia1_lineprofiler3.py
Function: calc_pure_python at line 9

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     9                                           @profile
    10                                           def calc_pure_python(desired_width, max_iterations):
    11                                               """복소 좌표(zs)와 복소 인자(cs) 리스트를 만들고,
    12                                               쥘리아 집합을 생성한 뒤 출력한다."""
    13         1          9.0      9.0      0.0      x_step = (float(x2 - x1) / float(desired_width))
    14         1          5.0      5.0      0.0      y_step = (float(y1 - y2) / float(desired_width))
    15         1          4.0      4.0      0.0      x = []
    16         1          4.0      4.0      0.0      y = []
    17         1          3.0      3.0      0.0      ycoord = y2
    18      1001       3903.0      3.9      0.0      while ycoord > y1:
    19      1000       4221.0      4.2      0.0          y.append(ycoord)
    20      1000       3877.0      3.9      0.0          ycoord += y_step
    21         1          3.0      3.0      0.0      xcoord = x1
    22      1001       4024.0      4.0      0.0      while xcoord < x2:
    23      1000       4335.0      4.3      0.0          x.append(xcoord)
    24      1000       4030.0      4.0      0.0          xcoord += x_step
    25                                               # 좌표 리스트와 각 셀에 g대ㅏㄴ 초기 조건을 만든다.
    26                                               # 초기 조건은 상수이며 쉽게 제거할 수 있는 점을 주목하자.
    27                                               # 우리가 만든 함수의 몇몇 입력을 사용한 실제 시나리오를 시뮬레이션할 때 사용한다.
    28         1          4.0      4.0      0.0      zs = []
    29         1          4.0      4.0      0.0      cs = []
    30      1001       4078.0      4.1      0.0      for ycoord in y:
    31   1001000    4032638.0      4.0      5.3          for xcoord in x:
    32   1000000    4959883.0      5.0      6.5              zs.append(complex(xcoord, ycoord))
    33   1000000    5171363.0      5.2      6.8              cs.append(complex(c_real, c_imag))
    34                                           
    35         1         89.0     89.0      0.0      print("Length ox x:", len(x))
    36         1         26.0     26.0      0.0      print("Total elements:", len(zs))
    37         1         14.0     14.0      0.0      start_time = time.time()
    38         1   62034694.0 62034694.0     81.4      output = calculate_z_serial_purepython(max_iterations, zs, cs)
    39         1         16.0     16.0      0.0      end_time = time.time()
    40         1          5.0      5.0      0.0      secs = end_time - start_time
    41         1        104.0    104.0      0.0      print(calculate_z_serial_purepython.__name__ + "took", secs, "seconds")
    42                                           
    43                                               # 다음 sum은 1000^2 그리드에 300번의 반복을 가정한 값이다.
    44                                               # 제한된 입력으로 작업할 경우 발생할 수 있는 사소한 에러를 잡기 위한 목적이다.
    45         1      10930.0  10930.0      0.0      assert sum(output) == 33219980
